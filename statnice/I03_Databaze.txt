- Mějme následující schéma: Pole(P_Id, Rozloha), Plodina(P_Id, Název), Sklizeň(S_Id, Datum, Pole_Id, Plodina_Id).
       - Definujte základní operace dotazovacího jazyka relační algebry.
       - Zapište dotaz v relační algebře, který vybere ID plodin, které zatím nebyly pěstovány.
              * Plodina - Plodina(P_Id) \ Sklizeň(Plodina_Id)
       - Zapište dotaz v relační algebře, který určí, na kterých polích s rozlohou větší než jeden hekatar se pěstovala pšenice.
              * Pole(Rozloha > 1Ha)[P_Id] & (Plodina(Název = "Pšenice") * Sklizeň)[Pole_Id]
- Mějme následující schéma: Pole(P_Id, Rozloha), Plodina(P_Id, Název), Sklizeň(S_Id, Datum, Pole_Id, Plodina_Id).
       - Vysvětlete základní syntaxi příkazu SELECT & jaký je rozdíl nezi WHERE & HAVING
              * SELECT expr FROM [table|table_expr] [As t]
              * HAVING je WHERE nad agregovanými daty
       - Zapište dotaz v SQL, který vypíše ID sklizní od 1.6.2015 do 1.8.2015
              * SELECT S_Id from Sklizeň WHERE Datum BETWEEN '1.6.2015' AND '1.8.2015'
       - Zapište dotaz v SQL, který vypíše plodiny sklizené alespoň na deseti polích.
              * SELECT Plodina_Id from Sklizeň GROUP BY Plodina_Id HAVING COUNT(Pole_Id) >= 10
- Navrhněte strukturu tabulek pro uložení informací o autorech a knihách do databáze. U každého autora se bude evidovat jeho jméno a příjmení, které nemusí být unikátní, a knihy, které napsal, u každé knihy pak název, který rovněž nemusí být unikátní, a seznam autorů, kteří knihu napsali. V návrhu vyznačte datové typy jednotlivých sloupců.
       * Writer - IDWriter, Name, Surname
       * Book - IDBook, Name
       * Authors - IDWriter, IDBook
       * U ER diagramu - writers -> 0..n -> NAPSAL <- 1..n <- books
              * nějaký autor nemusel napsat nějakou knihu => 0..n
- Napište SQL příkaz, který nad touto strukturou vypíše seznam autorů, kteří napsali alespoň jednu knihu.
       * SELECT DISTINCT IDWriter FROM Authors
- Napište SQL příkaz, který nad touto strukturou vypíše počet autorů každé knihy.
       * SELECT IDBook, COUNT(IDWriter) FROM Authors GROUP BY IDBook
- Napište SQL příkaz, který nad touto strukturou vypíše seznam autorů pro knihu danou názvem.
       * SELECT w.Name, w.Surname FROM Authors NATURAL JOIN Writer w NATURAL JOIN Book b Where b.Name == "sfda"
Dodržení přesné syntaxe SQL není předmětem hodnocení, přiměřeně blízký přibližný zápis stačí. Kde je to možné, zápis v syntaxi SQL můžete nahradit zápisem s použitím operací relační algebry
- Definujte serializovatelný (serializable) rozvrh.
	* Rozvrh evkvivalentní nějakému sériovému rozvrhu, tj. takovému, kde jdou transakce jedna po druhé.
- Uvažujte transakce T1: R(X)R(Y)W(X) a T2: R(X)R(Y)W(Y) a rozvrh H: R1(X)R2(X)R1(Y)R2(Y)W1(X)W2(Y)C1C2. Je rozvrh H serializovatelný (serializable)? Zdůvodněte a případně navrhněte opravu na serializovatelný rozvrh.
       * Není serializovatelný - nejde opravit, tak aby se zachovala idea transakcí
- Definujte zotavitelný (recoverable) rozvrh.
	* Rozvrh, kde transakce COMMITUJE az po tom co COMMITLY vsechny transakce, ktere ji ovlivnily
- Uvažujte transakce T1: R(X)W(Y) a T2: R(Y)W(Z) a rozvrh H:R1(X)W1(Y)R2(Y)W2(Z)C2C1. Je rozvrh H zotavitelný (recoverable)? Zdůvodněte a případně navrhněte opravu na zotavitelný rozvrh.
       * Není zotavitelný, ale stačí prohodit commity
- Vysvětlete rozdíl mezi konceptuálním a fyzickým modelem databáze.
- Jak převedete ”is-a“ hierarchii do relačního schématu? Předpokládejte, že hierarchie má pouze 2 podtypy (například ”is-a“ hierarchie Osoba s podtypy Zaměstnanec a Zákazník).
- Namodelujte (definujte entity a vztahy) pro situaci ”učitel učí několik studentů, student navštěvuje přednášky více učitelů“. Jak vyřešit situaci, kdy chceme zachytit, že tentýž student může mít téhož učitele pro více předmětů?
- Definujte pojem ”transakce“ a vysvětlete vlastnosti ACID (atomicity, consistency, isolation, durability).
       * skupina operací splňující ACID
       * A - zdání okamžitého provedení
       * C - vždy validní stav
       * I - jednotlivé transakce "nevidí" to co provádí ostatní
       * D - commitnutých změn už se nezbavíme
- Definujte pravidla, pomocí kterých izoluje transakce dvoufázové zamykání.
       * == pravidla dvoufázového zamykání
- Napište příklad dvou transakcí, jejichž současný běh může vést při použití dvoufázového zamykání k uváznutí (deadlock).
       * dvě proměné se skříženými zámky
- Vysvětlete, jak může tento deadlock ve vámi zvoleném příkladě konkrétně vzniknout.
- Vyjmenujte množinové operace relační algebry. Jsou na jejich operandy kladeny nějaké podmínky a proč? Jsou všechny množinové operace nezbytné pro zachování síly jazyka? Pokud ne, které lze vynechat a nahradit zbylými?
       * sjednocení, selekce, průnik, rozdíl, join, podíl, dělení[domácí úkol], přejmenovat atributy, kartézský součet
- Vysvětlete funkci dvoufázového zamykacího protokolu.
- Uvažujte transakce T1: R(A),W(B) a T2: W(A). Bude rozvrh {S1(A), R1(A), U1(A), S2(A), W2(A), U2(A), X1(B), W1(B), U1(B), COMMIT1, COMMIT2} dvoufázový ? Pokud ne, upravte ho aby byl a přitom se nezměnilo pořadí čtení a zápisů.
       * dvoufázovost je porušena na 1. transakci - nejprve se má všechno zamkonout & pak teprve odemknout
- Vysvětlete funkci dvoufázového zamykacího protokolu.
- V čem se od něj odlišuje striktní dvoufázový zamykací protokol? Zabraňuje některý z nich více anomáliím? Pokud ano, jakým?
	* Vše se odemyká až na konci, zaručuje zotavitelnost
- Uvažujte transakce T1: R(X)R(Y)W(Y) a T2: W(Y)R(Y). Dají rozvrhy S1: R1(X)W2(Y)R1(Y)W1(Y)R2(Z) a S2: W2(Y)R1(X)R1(Y)R2(Z)W1(Y) vždy stejný výsledek a proč?
	* Ano (mají stejné ty grafy... WW, WR, RW)
-  Navrhněte strukturu tabulek pro uložení informací o studentech a předmětech do databáze. U každého studenta se bude evidovat jeho jméno a příjmení, které nemusí být unikátní, u každého předmětu pak unikátníı název a seznam zapsaných studentů. V návrhu vyznačte datové typy jednotlivých sloupců.
- Napište SQL příkaz, který nad touto strukturou vypíše seznam studentů, kteří mají zapsaný alespoň jeden předmět.
- Napište SQL příkaz, který nad touto strukturou vypíše počet zapsaných studentů pro každý předmět.
- Napište SQL příkaz, který nad touto strukturou vypíše seznam studentů pro předmět daný názvem.
-  Popište relační datový model (tedy zejména koncept domén a relací, schéma, vztah těchto konceptů s tabulkami a řádky).
- Vysvětlete, proč se relační schémata upravují do normálních forem.
	* Aby se zabránilo redundancy?
- Napište, kdy je relační schéma ve třetí normální formě.
       * NENÍ pokud existuje tranzitivní závislost neklíčového sloupce na klíčovém (ale může být přímá)
       		- tedy je špatně mít v jedné tabulce Město Stát i Kontinent, jelikož Kontinent je přes Stát tranzitivně závislý na Městu 
- Vymyslete příklad univerzální relace, ve které je porušena druhá a třetí normální forma. Použijte atributy IdUčitel, IdŠkola, JménoUčitel, AdresaŠkola, MěstoŠkola.
	* Dovolíme jednomu učiteli učit na více školách, a všechny stributy narveme do jedné tabulky s klíčem (IdU a IdŠ), pak
	* Porušuje 2NF, protože: JménoUčitel je závislé na části klíče -- IdU
	* Porušuje 3NF, protože: MěstoŠkola je závislé na AdresaŠkola, což není klíč a sama je závislá na klíči
- Vysvětlete pojem „funkční závislosti atributů relace“ v relačním datovém modelu. Bude relace R(K1, K2, A, B), s klíčem (K1, K2), kde F = {K2 -> B} vhodně navržená? Pokud ne, jak by bylo vhodné návrh změnit a proč?
	* Měly by být dvě relace (K1, K2, A) a (K2, B)
- Uvažujte transakce T1: R(A)W(B)W(C) a T2: W(A)R(B)W(B). Je rozvrh S: R1(A)W2(A)W1(B)R2(B)W2(B)W1(C) serializovatelný (serializable)? Proč? Pokud ne, jak by bylo potřeba jej opravit?
- Jak se bude lišit – pokud vůbec – sémantika modelu, pokud je binární vztah reprezentován poprvé relací R(K1, K2) a podruhé relací R(K1, K2)?
	* EH?
- Popište podmínky nutné pro to, aby relační schéma bylo ve druhé normální formě. Uveďte jednoduchý příklad relace, která v dané normální normě nebude. Jak by bylo potřeba návrh takové relace upravit?
	* Viz výše + rozdělení na více tabulek
- Uvažujte transakce T1: R(A)W(B)W(C) a T2: W(A)R(B)W(B). Je rozvrh S: R1(A)W2(A)W1(B)R2(B)W2(B) COMMIT2 W1(C) COMMIT1 zotavitelný (recoverable)? Pokud ano, proč? Pokud ne, jak by bylo potřeba jej upravit, aby zotavitelný byl?
	* Není -- musíme COMMIT2 přesunout za COMMIT1
- Jak lze nahradit – pokud vůbec – operaci sjednocení v relační algebře pomocí ostatních operací, které tento dotazovací jazyk nabízí?
- Navrhněte E–R model pro evidenci "Projektů a jejich Řešitelů". Projekt je identifikovaný názvem a má striktní termín ukončení. Řešitel má jméno a příjmení (nemusí být unikátní) a specializaci. Na každém projektu se může podílet několik
řešitelů a jeden řešitel může pracovat na více projektech.
- Převeďte E–R model z předchozího bodu do relačního databázového modelu. V návrhu vyznačte datové typy jednotlivých sloupců tabulek.
- Nad strukturou tabulek z předchozího bodu napište dotaz, který vypíše seznam projektů, na kterých pracuje alespoň jeden "DB specialista".
- Definujte relaci konfliktové ekvivalence nad transakčními rozvrhy.
       * Rozvrhy mají stejné konfiktní páry
- Jaký je vztah mezi konfliktovou uspořádatelností (conflict–serializability) rozvrhu a serializovatelností (serializability)?
	CS je silnější podmínka než S
- Uvažujte transakce T1: R(A)W(A)W(B) a T2: R(A)W(A)R(B) a rozvrh S: R1(A)W1(A)R2(A)W2(A)R2(B)W1(B)C2C1. Je rozvrh S konfliktově uspořádatelný (conflict–serializable)? Zdůvodněte a případně navrhněte minimální opravu (ve smyslu počtu přesouvaných operací) na konfliktově serializovatelný rozvrh.
- Definujte zotavitelný (recoverable) rozvrh. Rozhodněte o opraveném rozvrhu z předchozího bodu, zda je, či není zotavitelný.
- Definujte pravidla pro izolaci transakcí s použitím dvoufázového zamykání.
	* Každá transakce nejprve zamká pad odemyká
- Uvažujte transakce T1: R(X)R(Y) a T2: W(X)W(Y). Napište všechny rozvrhy, kterými může tyto transakce plánovat dvoufázové zamykání (vyznačte i operace zamčení a odemčení).
- Může vést dvoufázové zamykání nad těmito transakcemi k uváznutí a proč?
- Popište základní operace relační algebry.
- Popište sémantiku následujících SQL příkazů pomocí operací relační algebry.
       - SELECT A,B FROM T WHERE A=1
       - SELECT * FROM T1,T2
       - SELECT * FROM T1 INNER JOIN T2 ON T1.A=T2.B
       - SELECT * FROM T1 LEFT OUTER JOIN T2 ON T1.A=T2.B
- Definujte relaci konfliktové ekvivalence nad transakčními rozvrhy.
- Mohou existovat konflikty ve správných (serializovatelných) rozvrzích?
- Mohou dva konfliktově ekvivalentní rozvrhy operující se stejným počátečním stavem databáze dospět k různým koncovým stavům? Proč?
- Uvažujte transakce T1: R(X)R(Y)W(X) a T2: R(X)R(Y)W(Y). Je rozvrh R1(X)R2(X)R1(Y)R2(Y)W1(X)W2(Y) serializovatelný a proč?
- Definujte pojem ”transakce“ a vysvětlete vlastnosti ACID (atomicity, consistency, isolation, durability).
- Uvažujte transakce T1: R(X)R(Y)W(X) a T2: R(X)R(Y)W(Y). Je rozvrh R1(X)R2(X)R1(Y)R2(Y)W1(X)W2(Y) serializovatelný a proč?
